generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?

  accounts            Account[]
  senderConvo         Conversation[]   @relation("senderForConvo")
  receiverConvo       Conversation[]   @relation("receiverForConvo")
  Message             Message[]
  RequestedFriend     FriendRequests[] @relation("requested")
  ToAddFriendId       AddedFriends[]   @relation("toaddfriend")
  ToAddFriendSenderId AddedFriends[]   @relation("toaddfriendsenderid")
}

model AddedFriends {
  id         String @id @default(cuid())
  userId     String
  sentUserId String

  AddedFriends User @relation("toaddfriend", fields: [userId], references: [id], onDelete: Cascade)
  AddedFriend  User @relation("toaddfriendsenderid", fields: [sentUserId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FriendRequests {
  id       String @id @default(cuid())
  Requests User   @relation("requested", fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@unique([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model resetPasswordsVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Message {
  id             String       @id @default(cuid())
  senderId       String
  message        String
  conversationId String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(references: [id], fields: [senderId], onDelete: Cascade)
}

model Conversation {
  id         String    @id @default(cuid())
  Friends    Boolean?  @default(false)
  Accepted   Boolean?  @default(false)
  senderId   String
  receiverId String
  messages   Message[]
  sender     User      @relation("senderForConvo", fields: [senderId], references: [id])
  receiver   User      @relation("receiverForConvo", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}
